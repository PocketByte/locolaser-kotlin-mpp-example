apply plugin: 'kotlin-multiplatform'
apply plugin: 'com.android.library'

// 1.3: Apply LocoLaser plugin
apply plugin: "ru.pocketbyte.locolaser"

group = 'ru.pocketbyte.locolaser.kotlin_multiplatform_example'
version = '1.0'


android {
    compileSdkVersion project.android_sdk_compile
    buildToolsVersion project.android_build_tool_version

    defaultConfig {
        minSdkVersion project.android_sdk_min
        targetSdkVersion project.android_sdk_target
        versionCode 1
        versionName project.version
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}


dependencies {
    // 2: Add dependency for Kotlin mobile platforms
    localize "ru.pocketbyte.locolaser:platform-kotlin-mobile:1.2.8"
}

kotlin {
    targets {
        fromPreset(presets.android, 'android')

        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                              ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            // 6.2 Add interop to Objective-C code that implements work work with plurals
            compilations.main.cinterops{
                LocalizedPlural {
                    defFile project.file("src/iosMain/c_interop/LocalizedPlural.def")
                }
            }

            binaries {
                framework('Common')
            }
        }
    }

    sourceSets {
        commonMain {
            // 7.1 Add source dir for generated common classes
            kotlin.srcDir('./build/generated/locolaser/common/')
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib-common'

            }
        }

        androidMain {
            // 7.2 Add source dir for generated android classes
            kotlin.srcDir('./build/generated/locolaser/android/')
            dependencies {
                api 'org.jetbrains.kotlin:kotlin-stdlib'
                api "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
            }
        }

        iosMain {
            // 7.3 Add source dir for generated iOS classes
            kotlin.srcDir('./build/generated/locolaser/ios/')
        }
    }
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework("Common", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}
tasks.build.dependsOn packForXCode

// 4 Run task ‘localize’ before each build
preBuild.dependsOn {
    project.tasks.getByPath(':common:localize')
}